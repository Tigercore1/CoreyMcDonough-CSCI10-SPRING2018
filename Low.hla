/*
 * Program ProgrammingChallengeThirteen
 *
 * revised by			Corey McDonough
 * created on			5/3/18
 *
 * This program gives information about an int8 that is entered. All if/elseif/else
 * statements are converted to assembly style.
 *
 */
program ProgrammingChallengeThirteen;

#include ("stdlib.hhf")

/* forward declarations */
procedure getInt8 (prompt: string; min: int8; max: int8); @returns("al"); @forward;

/* procedure definitions */
procedure getInt8 (prompt: string; min: int8; max: int8);
begin getInt8;

	push(edx);
	push(ecx);
	push(ebx);
	forever
		try
			stdout.put(nl, prompt, " [", min, " to ", max, "]: ");
			stdin.flushInput();
			stdin.geti8();
			unprotected
				cmp((type int8 al), min);
				jl INT8_BAD;
				cmp((type int8 al), max);
				jg INT8_BAD;
				break;
				INT8_BAD:
					stdout.put(nl, "Value not in required range.");
		anyexception
			stdout.put(nl, "Invalid input.");
		endtry;
	endfor;
	pop(ebx);
	pop(ecx);
	pop(edx);

end getInt8;

/* program variables and main */

static
	input: int8;
	isPrime: boolean;
	
begin ProgrammingChallengeThirteen;

	forever
		
		console.cls();
		
		mov(getInt8("Please enter an int8", -127, 127), input);
		
		stdout.put(nl, "What do you want to do with your input value?", nl);
		stdout.put("1. Test to see if it is negative", nl);
		stdout.put("2. Test to see if it is even", nl);
		stdout.put("3. Reverse its sign", nl);
		stdout.put("4. Test to see if it is prime", nl);
		stdout.put("your choice: ");
		getInt8("your choice", 1, 4);
		
		console.cls();
		
		cmp(al, 1);
		jne OPTION_1_7;
			cmp(input, 0);
			jns OPTION_1_1;
				stdout.put(input, " is a negative value.", nl);
				jmp OPTION_END_1;
			OPTION_1_1:
				stdout.put(input, " is greater than or equal to zero.", nl);
			OPTION_END_1:
			jmp OPTION_END_7;
		OPTION_1_7:
		cmp(al, 2);
		jne OPTION_2_7;
			mov(0, ah);
			mov(input, al);
			idiv(2, ax);
			cmp(ah, 0);
			jne OPTION_1_2;
				stdout.put(input, " is an even number.", nl);
				jmp OPTION_END_2;
			OPTION_1_2:
				stdout.put(input, " is an odd number.", nl);
			OPTION_END_2:
			jmp OPTION_END_7;
		OPTION_2_7:
		cmp(al, 3);
		jne OPTION_3_7;
			mov(input, al);
			not(al);
			add(1, al);
			stdout.put(input, " sign reversed is ", (type int8 al), nl);
			jmp OPTION_END_7;
		OPTION_3_7:
			cmp(input, 0);
			jne OPTION_END_3;
				stdout.put("Reversing the sign.", nl, nl);
				mov(input, al);
				not(al);
				add(1, al);
				mov(al, input);
			OPTION_END_3:
			mov(true, isPrime);
			cmp(input, 2);
			jns OPTION_1_5;
				mov(false, isPrime);
				jmp OPTION_END_5;
			OPTION_1_5:
				for (mov(2, cl); cl<input; inc(cl)) do
					mov(0, ah);
					mov(input, al);
					div(cl, ax);
					cmp(ah, 0);
					jne OPTION_END_4;
						mov(false, isPrime);
						break;
					OPTION_END_4:
				endfor;
			OPTION_END_5:
			cmp(isPrime, true);
			jne OPTION_1_6;
				stdout.put(input, " is a prime number.", nl);
				jmp OPTION_END_6;
			OPTION_1_6:
				stdout.put(input, " is not a prime number.", nl);
			OPTION_END_6:
		OPTION_END_7:
		
		
		stdout.put(nl, nl, "Go again [y/n]? ");
		stdin.flushInput();
		
		stdin.getc(); 
		and($5f, al); // NEED CODE TO FORCE UPPER-CASE
		
		cmp(al, 'N');
		jne GO_AGAIN;
			break;
		GO_AGAIN:
			console.cls();
		
	endfor;
	

end ProgrammingChallengeThirteen;